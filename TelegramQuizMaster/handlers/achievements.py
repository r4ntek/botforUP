from aiogram import Router, F
from aiogram.types import CallbackQuery

from keyboards.inline import get_back_to_main
from utils.data_manager import DataManager
from utils.achievements import AchievementManager
from config import ACHIEVEMENTS_CONFIG, USERS_DATA_FILE, ACHIEVEMENTS_DATA_FILE

router = Router()

# Initialize managers
data_manager = DataManager(USERS_DATA_FILE, ACHIEVEMENTS_DATA_FILE)
achievement_manager = AchievementManager(data_manager)

@router.callback_query(F.data == "achievements")
async def show_achievements(callback: CallbackQuery):
    """Show user achievements"""
    user_id = str(callback.from_user.id)
    user = data_manager.get_user(user_id)
    
    user_achievements = user.get("achievements", [])
    total_achievements = len(ACHIEVEMENTS_CONFIG)
    earned_count = len(user_achievements)
    
    text = (
        f"üèÜ **–í–∞—à–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è**\n\n"
        f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {earned_count}/{total_achievements}\n"
        f"üíé –û—á–∫–∏: {user['total_points']}\n\n"
    )
    
    if not user_achievements:
        text += (
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π.\n"
            "–ù–∞—á–Ω–∏—Ç–µ –∏–∑—É—á–∞—Ç—å –Ω–∞–≤—ã–∫–∏, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–µ—Ä–≤—ã–µ –Ω–∞–≥—Ä–∞–¥—ã!\n\n"
            "üéØ **–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:**\n"
        )
    else:
        text += "‚úÖ **–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:**\n"
        
        # Show earned achievements
        for ach_id in user_achievements:
            if ach_id in ACHIEVEMENTS_CONFIG:
                ach = ACHIEVEMENTS_CONFIG[ach_id]
                text += f"üèÜ {ach['name']}\n   {ach['description']} (+{ach['points']} –æ—á–∫–æ–≤)\n\n"
        
        # Show remaining achievements
        remaining = [ach_id for ach_id in ACHIEVEMENTS_CONFIG.keys() if ach_id not in user_achievements]
        if remaining:
            text += "üéØ **–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:**\n"
    
    # Show remaining achievements or all if none earned
    if not user_achievements or earned_count < total_achievements:
        remaining_achievements = [ach_id for ach_id in ACHIEVEMENTS_CONFIG.keys() if ach_id not in user_achievements]
        
        for ach_id in remaining_achievements:
            ach = ACHIEVEMENTS_CONFIG[ach_id]
            text += f"üîí {ach['name']}\n   {ach['description']} (+{ach['points']} –æ—á–∫–æ–≤)\n\n"
    
    # Add achievement tips
    text += "üí° **–ö–∞–∫ –ø–æ–ª—É—á–∞—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:**\n"
    text += "‚Ä¢ –î–æ–±–∞–≤–ª—è–π—Ç–µ –Ω–æ–≤—ã–µ –Ω–∞–≤—ã–∫–∏\n"
    text += "‚Ä¢ –ó–∞–Ω–∏–º–∞–π—Ç–µ—Å—å –∫–∞–∂–¥—ã–π –¥–µ–Ω—å\n"
    text += "‚Ä¢ –ü–æ–ª—É—á–∞–π—Ç–µ —Å–æ–≤–µ—Ç—ã –∏ –º–æ—Ç–∏–≤–∞—Ü–∏—é\n"
    text += "‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ —Å–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å\n"
    
    await callback.message.edit_text(text, reply_markup=get_back_to_main(), parse_mode="Markdown")

@router.callback_query(F.data == "achievement_details")
async def show_achievement_details(callback: CallbackQuery):
    """Show detailed achievement information"""
    user_id = str(callback.from_user.id)
    user = data_manager.get_user(user_id)
    
    # Calculate progress towards achievements
    skills = user["skills"]
    stats = user["statistics"]
    
    # Current stats
    skill_count = len(skills)
    max_streak = max([skill["streak"] for skill in skills.values()], default=0)
    tips_count = stats.get("tips_received", 0)
    
    text = (
        f"üéØ **–ü—Ä–æ–≥—Ä–µ—Å—Å –∫ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è–º**\n\n"
        f"üìä **–¢–µ–∫—É—â–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:**\n"
        f"üéØ –ù–∞–≤—ã–∫–æ–≤: {skill_count}\n"
        f"üî• –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–µ—Ä–∏—è: {max_streak} –¥–Ω–µ–π\n"
        f"üí° –°–æ–≤–µ—Ç–æ–≤ –ø–æ–ª—É—á–µ–Ω–æ: {tips_count}\n\n"
        f"üèÜ **–ü—Ä–æ–≥—Ä–µ—Å—Å –∫ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è–º:**\n"
    )
    
    # Progress to first skill
    if "first_skill" not in user["achievements"]:
        text += f"üéØ –ü–µ—Ä–≤—ã–π —à–∞–≥: {'‚úÖ' if skill_count >= 1 else '‚ùå'} –î–æ–±–∞–≤–∏—Ç—å –Ω–∞–≤—ã–∫ ({skill_count}/1)\n"
    
    # Progress to multiple skills
    if "multiple_skills" not in user["achievements"]:
        text += f"üåü –ú–Ω–æ–≥–æ–≥—Ä–∞–Ω–Ω–æ—Å—Ç—å: {'‚úÖ' if skill_count >= 3 else '‚ùå'} –ò–∑—É—á–∞—Ç—å 3+ –Ω–∞–≤—ã–∫–∞ ({skill_count}/3)\n"
    
    # Progress to streak achievements
    if "streak_3" not in user["achievements"]:
        text += f"üî• –ì–æ—Ä—è—á–∏–π —Å—Ç–∞—Ä—Ç: {'‚úÖ' if max_streak >= 3 else '‚ùå'} –°–µ—Ä–∏—è 3 –¥–Ω—è ({max_streak}/3)\n"
    
    if "streak_7" not in user["achievements"]:
        text += f"‚ö° –ù–µ–¥–µ–ª—è —Å–∏–ª—ã: {'‚úÖ' if max_streak >= 7 else '‚ùå'} –°–µ—Ä–∏—è 7 –¥–Ω–µ–π ({max_streak}/7)\n"
    
    if "streak_30" not in user["achievements"]:
        text += f"üíé –ú–µ—Å—è—Ü —É–ø–æ—Ä—Å—Ç–≤–∞: {'‚úÖ' if max_streak >= 30 else '‚ùå'} –°–µ—Ä–∏—è 30 –¥–Ω–µ–π ({max_streak}/30)\n"
    
    # Progress to tips achievements
    if "first_tip" not in user["achievements"]:
        text += f"üí° –õ—é–±–æ–∑–Ω–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {'‚úÖ' if tips_count >= 1 else '‚ùå'} –ü–æ–ª—É—á–∏—Ç—å —Å–æ–≤–µ—Ç ({tips_count}/1)\n"
    
    if "tips_fan" not in user["achievements"]:
        text += f"üß† –£—á–µ–Ω–∏–∫: {'‚úÖ' if tips_count >= 25 else '‚ùå'} –ü–æ–ª—É—á–∏—Ç—å 25 —Å–æ–≤–µ—Ç–æ–≤ ({tips_count}/25)\n"
    
    text += "\nüí° –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –∑–∞–Ω–∏–º–∞—Ç—å—Å—è, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è!"
    
    await callback.message.edit_text(text, reply_markup=get_back_to_main(), parse_mode="Markdown")

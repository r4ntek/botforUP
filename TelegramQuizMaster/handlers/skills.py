from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
import random

from keyboards.inline import (
    get_skill_categories, get_skills_in_category, get_user_skills,
    get_skill_actions, get_main_menu, get_back_to_main, get_confirmation
)
from states.user_states import SkillStates
from utils.data_manager import DataManager
from utils.achievements import AchievementManager
from config import SKILL_CATEGORIES, LEARNING_TIPS, STUDY_MATERIALS, USERS_DATA_FILE, ACHIEVEMENTS_DATA_FILE

router = Router()

# Initialize managers
data_manager = DataManager(USERS_DATA_FILE, ACHIEVEMENTS_DATA_FILE)
achievement_manager = AchievementManager(data_manager)

@router.callback_query(F.data == "my_skills")
async def show_my_skills(callback: CallbackQuery):
    """Show user's skills"""
    user_id = str(callback.from_user.id)
    skills = data_manager.get_user_skills(user_id)
    
    if not skills:
        text = (
            "üéØ <b>–ú–æ–∏ –Ω–∞–≤—ã–∫–∏</b>\n\n"
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –Ω–∞–≤—ã–∫–æ–≤.\n"
            "–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—ã–π –Ω–∞–≤—ã–∫, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å!"
        )
    else:
        text = "üéØ <b>–ú–æ–∏ –Ω–∞–≤—ã–∫–∏</b>\n\n"
        for skill_data in skills.values():
            streak_text = f"üî• {skill_data['streak']}" if skill_data['streak'] > 0 else "üí§"
            time_text = f"{skill_data['total_time_minutes']//60}—á {skill_data['total_time_minutes']%60}–º"
            text += f"{streak_text} <b>{skill_data['name']}</b>\n"
            text += f"   üìä {skill_data['sessions']} —Å–µ—Å—Å–∏–π ‚Ä¢ ‚è∞ {time_text}\n\n"
    
    await callback.message.edit_text(
        text, 
        reply_markup=get_user_skills(skills),
        parse_mode="HTML"
    )

@router.callback_query(F.data == "add_skill")
async def add_skill_start(callback: CallbackQuery):
    """Start adding a new skill"""
    text = (
        "‚ûï **–î–æ–±–∞–≤–∏—Ç—å –Ω–∞–≤—ã–∫**\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –Ω–∞–≤—ã–∫–∞:"
    )
    
    await callback.message.edit_text(
        text,
        reply_markup=get_skill_categories(),
        parse_mode="Markdown"
    )

@router.callback_query(F.data.startswith("category_"))
async def select_category(callback: CallbackQuery, state: FSMContext):
    """Select skill category"""
    category = callback.data.replace("category_", "")
    
    await state.update_data(selected_category=category)
    
    if category == "‚ú® –î—Ä—É–≥–æ–µ":
        await state.set_state(SkillStates.waiting_for_custom_skill)
        text = (
            "‚úèÔ∏è **–°–≤–æ–π –Ω–∞–≤—ã–∫**\n\n"
            "–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞–≤—ã–∫–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –∏–∑—É—á–∞—Ç—å:"
        )
        await callback.message.edit_text(text, reply_markup=get_back_to_main(), parse_mode="Markdown")
    else:
        text = f"üìö **{category}**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–≤—ã–∫:"
        await callback.message.edit_text(
            text,
            reply_markup=get_skills_in_category(category),
            parse_mode="Markdown"
        )

@router.callback_query(F.data.startswith("skill_"))
async def select_skill(callback: CallbackQuery, state: FSMContext):
    """Select specific skill"""
    skill_name = callback.data.replace("skill_", "")
    user_id = str(callback.from_user.id)
    
    # Get category from state
    data = await state.get_data()
    category = data.get("selected_category", "–î—Ä—É–≥–æ–µ")
    
    # Add skill
    success = data_manager.add_skill(user_id, skill_name, category)
    
    if success:
        # Check for new achievements
        new_achievements = achievement_manager.check_achievements(user_id)
        
        text = f"‚úÖ **–ù–∞–≤—ã–∫ –¥–æ–±–∞–≤–ª–µ–Ω!**\n\nüéØ {skill_name}\nüìö –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –∏ –ø–æ–ª—É—á–∞—Ç—å —Å–æ–≤–µ—Ç—ã!"
        
        await callback.message.edit_text(text, reply_markup=get_main_menu(), parse_mode="Markdown")
        
        # Show achievements if any
        if new_achievements:
            achievement_text = "üéâ **–ù–æ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è!**\n\n"
            for ach in new_achievements:
                achievement_text += f"üèÜ {ach['name']}\n{ach['description']}\n+{ach['points']} –æ—á–∫–æ–≤\n\n"
            
            await callback.message.answer(achievement_text, reply_markup=get_back_to_main(), parse_mode="Markdown")
    else:
        text = f"‚ö†Ô∏è **–ù–∞–≤—ã–∫ —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω**\n\n–ù–∞–≤—ã–∫ \"{skill_name}\" —É–∂–µ –µ—Å—Ç—å –≤ –≤–∞—à–µ–º —Å–ø–∏—Å–∫–µ."
        await callback.message.edit_text(text, reply_markup=get_main_menu(), parse_mode="Markdown")
    
    await state.clear()

@router.callback_query(F.data == "custom_skill")
async def custom_skill_input(callback: CallbackQuery, state: FSMContext):
    """Handle custom skill input"""
    await state.set_state(SkillStates.waiting_for_custom_skill)
    
    text = (
        "‚úèÔ∏è **–°–≤–æ–π –Ω–∞–≤—ã–∫**\n\n"
        "–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞–≤—ã–∫–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –∏–∑—É—á–∞—Ç—å:"
    )
    
    await callback.message.edit_text(text, reply_markup=get_back_to_main(), parse_mode="Markdown")

@router.message(SkillStates.waiting_for_custom_skill)
async def process_custom_skill(message: Message, state: FSMContext):
    """Process custom skill name"""
    skill_name = message.text.strip()
    user_id = str(message.from_user.id)
    
    if len(skill_name) < 2:
        await message.answer("‚ö†Ô∏è –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–∞–≤—ã–∫–∞ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    
    if len(skill_name) > 50:
        await message.answer("‚ö†Ô∏è –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–∞–≤—ã–∫–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å–∏–º—É–º 50 —Å–∏–º–≤–æ–ª–æ–≤). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    
    # Get category from state
    data = await state.get_data()
    category = data.get("selected_category", "‚ú® –î—Ä—É–≥–æ–µ")
    
    # Add skill
    success = data_manager.add_skill(user_id, skill_name, category)
    
    if success:
        # Check for new achievements
        new_achievements = achievement_manager.check_achievements(user_id)
        
        text = f"‚úÖ **–ù–∞–≤—ã–∫ –¥–æ–±–∞–≤–ª–µ–Ω!**\n\nüéØ {skill_name}\nüìö –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –∏ –ø–æ–ª—É—á–∞—Ç—å —Å–æ–≤–µ—Ç—ã!"
        
        await message.answer(text, reply_markup=get_main_menu(), parse_mode="Markdown")
        
        # Show achievements if any
        if new_achievements:
            achievement_text = "üéâ **–ù–æ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è!**\n\n"
            for ach in new_achievements:
                achievement_text += f"üèÜ {ach['name']}\n{ach['description']}\n+{ach['points']} –æ—á–∫–æ–≤\n\n"
            
            await message.answer(achievement_text, reply_markup=get_back_to_main(), parse_mode="Markdown")
    else:
        text = f"‚ö†Ô∏è **–ù–∞–≤—ã–∫ —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω**\n\n–ù–∞–≤—ã–∫ \"{skill_name}\" —É–∂–µ –µ—Å—Ç—å –≤ –≤–∞—à–µ–º —Å–ø–∏—Å–∫–µ."
        await message.answer(text, reply_markup=get_main_menu(), parse_mode="Markdown")
    
    await state.clear()

@router.callback_query(F.data.startswith("view_skill_"))
async def view_skill(callback: CallbackQuery, state: FSMContext):
    """View skill details"""
    skill_key = callback.data.replace("view_skill_", "")
    user_id = str(callback.from_user.id)
    
    skills = data_manager.get_user_skills(user_id)
    
    if skill_key not in skills:
        await callback.message.edit_text(
            "‚ùå –ù–∞–≤—ã–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω",
            reply_markup=get_main_menu()
        )
        return
    
    skill = skills[skill_key]
    await state.update_data(current_skill=skill_key)
    
    # Format skill info
    total_hours = skill["total_time_minutes"] // 60
    total_minutes = skill["total_time_minutes"] % 60
    time_text = f"{total_hours}—á {total_minutes}–º" if total_hours > 0 else f"{total_minutes}–º"
    
    streak_emoji = "üî•" if skill["streak"] > 0 else "üí§"
    
    text = (
        f"üéØ **{skill['name']}**\n\n"
        f"üìö –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {skill['category']}\n"
        f"{streak_emoji} –¢–µ–∫—É—â–∞—è —Å–µ—Ä–∏—è: {skill['streak']} –¥–Ω–µ–π\n"
        f"üèÜ –õ—É—á—à–∞—è —Å–µ—Ä–∏—è: {skill['best_streak']} –¥–Ω–µ–π\n"
        f"üìä –í—Å–µ–≥–æ —Å–µ—Å—Å–∏–π: {skill['sessions']}\n"
        f"‚è∞ –û–±—â–µ–µ –≤—Ä–µ–º—è: {time_text}\n"
    )
    
    if skill["goal_minutes"] > 0:
        goal_hours = skill["goal_minutes"] // 60
        goal_minutes = skill["goal_minutes"] % 60
        goal_text = f"{goal_hours}—á {goal_minutes}–º" if goal_hours > 0 else f"{goal_minutes}–º"
        progress = min(100, (skill["total_time_minutes"] / skill["goal_minutes"]) * 100)
        text += f"üéØ –¶–µ–ª—å: {goal_text} ({progress:.1f}%)\n"
    
    if skill["last_session"]:
        from datetime import datetime
        last_session = datetime.fromisoformat(skill["last_session"])
        text += f"üìÖ –ü–æ—Å–ª–µ–¥–Ω—è—è —Å–µ—Å—Å–∏—è: {last_session.strftime('%d.%m.%Y')}\n"
    
    await callback.message.edit_text(
        text,
        reply_markup=get_skill_actions(skill_key),
        parse_mode="Markdown"
    )

@router.callback_query(F.data.startswith("skill_tip_"))
async def get_skill_tip(callback: CallbackQuery):
    """Get tip for specific skill"""
    skill_key = callback.data.replace("skill_tip_", "")
    user_id = str(callback.from_user.id)
    
    skills = data_manager.get_user_skills(user_id)
    
    if skill_key not in skills:
        await callback.answer("‚ùå –ù–∞–≤—ã–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    skill = skills[skill_key]
    skill_name = skill["name"].lower()
    
    # Get tips for skill category
    tips = LEARNING_TIPS.get(skill_name, LEARNING_TIPS["default"])
    tip = random.choice(tips)
    
    # Update statistics
    data_manager.update_statistics(user_id, "tips_received")
    
    # Check for achievements
    new_achievements = achievement_manager.check_achievements(user_id)
    
    text = f"üí° **–°–æ–≤–µ—Ç –¥–ª—è –Ω–∞–≤—ã–∫–∞ \"{skill['name']}\"**\n\n{tip}"
    
    await callback.message.edit_text(text, reply_markup=get_back_to_main(), parse_mode="Markdown")
    
    # Show achievements if any
    if new_achievements:
        achievement_text = "üéâ **–ù–æ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è!**\n\n"
        for ach in new_achievements:
            achievement_text += f"üèÜ {ach['name']}\n{ach['description']}\n+{ach['points']} –æ—á–∫–æ–≤\n\n"
        
        await callback.message.answer(achievement_text, reply_markup=get_back_to_main(), parse_mode="Markdown")

@router.callback_query(F.data.startswith("delete_skill_"))
async def confirm_delete_skill(callback: CallbackQuery):
    """Confirm skill deletion"""
    skill_key = callback.data.replace("delete_skill_", "")
    user_id = str(callback.from_user.id)
    
    skills = data_manager.get_user_skills(user_id)
    
    if skill_key not in skills:
        await callback.answer("‚ùå –ù–∞–≤—ã–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    skill_name = skills[skill_key]["name"]
    
    text = f"üóëÔ∏è **–£–¥–∞–ª–µ–Ω–∏–µ –Ω–∞–≤—ã–∫–∞**\n\n–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –Ω–∞–≤—ã–∫ \"{skill_name}\"?\n\n‚ö†Ô∏è –í—Å–µ –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ –±—É–¥—É—Ç –ø–æ—Ç–µ—Ä—è–Ω—ã!"
    
    await callback.message.edit_text(
        text,
        reply_markup=get_confirmation("delete_skill", skill_key),
        parse_mode="Markdown"
    )

@router.callback_query(F.data.startswith("confirm_delete_skill_"))
async def delete_skill(callback: CallbackQuery):
    """Delete skill"""
    skill_key = callback.data.replace("confirm_delete_skill_", "")
    user_id = str(callback.from_user.id)
    
    user = data_manager.get_user(user_id)
    
    if skill_key in user["skills"]:
        skill_name = user["skills"][skill_key]["name"]
        del user["skills"][skill_key]
        data_manager.update_user(user_id, user)
        
        text = f"‚úÖ **–ù–∞–≤—ã–∫ —É–¥–∞–ª–µ–Ω**\n\n–ù–∞–≤—ã–∫ \"{skill_name}\" —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ –≤–∞—à–µ–≥–æ —Å–ø–∏—Å–∫–∞."
    else:
        text = "‚ùå **–û—à–∏–±–∫–∞**\n\n–ù–∞–≤—ã–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω."
    
    await callback.message.edit_text(text, reply_markup=get_main_menu(), parse_mode="Markdown")

@router.callback_query(F.data.startswith("materials_"))
async def show_study_materials(callback: CallbackQuery):
    """Show study materials for specific skill"""
    skill_key = callback.data.replace("materials_", "")
    user_id = str(callback.from_user.id)
    
    skills = data_manager.get_user_skills(user_id)
    
    if skill_key not in skills:
        await callback.answer("‚ùå –ù–∞–≤—ã–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    skill = skills[skill_key]
    skill_name = skill["name"].lower()
    
    # Get materials for skill
    materials = STUDY_MATERIALS.get(skill_name, STUDY_MATERIALS["default"])
    
    text = f"üìö **–ú–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è**\n\n"
    text += f"üéØ –ù–∞–≤—ã–∫: **{skill['name']}**\n\n"
    
    # Videos section
    text += "üé• **–í–∏–¥–µ–æ –∏ –∫—É—Ä—Å—ã:**\n"
    for video in materials["videos"][:3]:  # Show top 3
        text += f"‚Ä¢ {video}\n"
    text += "\n"
    
    # Books section  
    text += "üìñ **–ö–Ω–∏–≥–∏ –∏ –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞:**\n"
    for book in materials["books"][:3]:  # Show top 3
        text += f"‚Ä¢ {book}\n"
    text += "\n"
    
    # Websites section
    text += "üåê **–ü–æ–ª–µ–∑–Ω—ã–µ —Å–∞–π—Ç—ã:**\n"
    for website in materials["websites"][:3]:  # Show top 3
        text += f"‚Ä¢ {website}\n"
    text += "\n"
    
    text += "üí° _–ù–∞—á–Ω–∏—Ç–µ —Å –æ–¥–Ω–æ–≥–æ —Ä–µ—Å—É—Ä—Å–∞ –∏ –∏–∑—É—á–∞–π—Ç–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ!_"
    
    await callback.message.edit_text(text, reply_markup=get_skill_actions(skill_key), parse_mode="Markdown")

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
import random
from datetime import datetime, timedelta

from keyboards.inline import (
    get_session_time, get_user_skills, get_main_menu, 
    get_back_to_main, get_skill_actions
)
from states.user_states import ProgressStates
from utils.data_manager import DataManager
from utils.achievements import AchievementManager
from config import MOTIVATIONAL_MESSAGES, LEARNING_TIPS, USERS_DATA_FILE, ACHIEVEMENTS_DATA_FILE

router = Router()

# Initialize managers
data_manager = DataManager(USERS_DATA_FILE, ACHIEVEMENTS_DATA_FILE)
achievement_manager = AchievementManager(data_manager)

@router.callback_query(F.data.startswith("add_session_"))
async def add_session_start(callback: CallbackQuery, state: FSMContext):
    """Start adding practice session"""
    skill_key = callback.data.replace("add_session_", "")
    user_id = str(callback.from_user.id)
    
    skills = data_manager.get_user_skills(user_id)
    
    if skill_key not in skills:
        await callback.answer("‚ùå –ù–∞–≤—ã–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    skill = skills[skill_key]
    await state.update_data(session_skill=skill_key)
    
    text = (
        f"‚è±Ô∏è **–î–æ–±–∞–≤–∏—Ç—å —Å–µ—Å—Å–∏—é**\n\n"
        f"üéØ –ù–∞–≤—ã–∫: {skill['name']}\n\n"
        f"–°–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã –ø–æ—Ç—Ä–∞—Ç–∏–ª–∏ –Ω–∞ –ø—Ä–∞–∫—Ç–∏–∫—É?"
    )
    
    await callback.message.edit_text(
        text,
        reply_markup=get_session_time(),
        parse_mode="Markdown"
    )

@router.callback_query(F.data.startswith("time_"))
async def select_session_time(callback: CallbackQuery, state: FSMContext):
    """Select session time"""
    minutes = int(callback.data.replace("time_", ""))
    
    data = await state.get_data()
    skill_key = data.get("session_skill")
    
    if not skill_key:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–∞–≤—ã–∫ –Ω–µ –≤—ã–±—Ä–∞–Ω")
        return
    
    await add_session_with_time(callback, state, skill_key, minutes)

@router.callback_query(F.data == "custom_time")
async def custom_session_time(callback: CallbackQuery, state: FSMContext):
    """Request custom session time"""
    await state.set_state(ProgressStates.adding_progress)
    
    text = (
        "‚úèÔ∏è **–°–≤–æ–µ –≤—Ä–µ–º—è**\n\n"
        "–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω—É—Ç –ø—Ä–∞–∫—Ç–∏–∫–∏ (—á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 600):"
    )
    
    await callback.message.edit_text(text, reply_markup=get_back_to_main(), parse_mode="Markdown")

@router.message(ProgressStates.adding_progress)
async def process_custom_time(message: Message, state: FSMContext):
    """Process custom session time"""
    try:
        minutes = int(message.text.strip())
        
        if minutes < 1 or minutes > 600:
            await message.answer("‚ö†Ô∏è –í—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 600 –º–∏–Ω—É—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            return
        
        data = await state.get_data()
        skill_key = data.get("session_skill")
        
        if not skill_key:
            await message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–∞–≤—ã–∫ –Ω–µ –≤—ã–±—Ä–∞–Ω", reply_markup=get_main_menu())
            await state.clear()
            return
        
        await add_session_with_time(message, state, skill_key, minutes, is_message=True)
        
    except ValueError:
        await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 600:")

async def add_session_with_time(event, state: FSMContext, skill_key: str, minutes: int, is_message: bool = False):
    """Add session with specified time"""
    user_id = str(event.from_user.id)
    
    # Add session
    streak = data_manager.add_session(user_id, skill_key, minutes)
    
    # Get updated skill info
    skills = data_manager.get_user_skills(user_id)
    skill = skills[skill_key]
    
    # Check for achievements
    new_achievements = achievement_manager.check_achievements(user_id)
    
    # Format response
    hours = minutes // 60
    mins = minutes % 60
    time_text = f"{hours}—á {mins}–º" if hours > 0 else f"{mins}–º"
    
    total_hours = skill["total_time_minutes"] // 60
    total_mins = skill["total_time_minutes"] % 60
    total_time_text = f"{total_hours}—á {total_mins}–º" if total_hours > 0 else f"{total_mins}–º"
    
    text = (
        f"‚úÖ **–°–µ—Å—Å–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞!**\n\n"
        f"üéØ –ù–∞–≤—ã–∫: {skill['name']}\n"
        f"‚è∞ –í—Ä–µ–º—è —Å–µ—Å—Å–∏–∏: {time_text}\n"
        f"üî• –°–µ—Ä–∏—è: {streak} –¥–Ω–µ–π\n"
        f"üìä –í—Å–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏: {total_time_text}\n"
    )
    
    # Add motivational message
    if streak > 1:
        text += f"\nüí™ –û—Ç–ª–∏—á–Ω–∞—è —Å–µ—Ä–∏—è! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!"
    elif streak == 1:
        text += f"\nüöÄ –•–æ—Ä–æ—à–µ–µ –Ω–∞—á–∞–ª–æ! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–∏–º–∞—Ç—å—Å—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å!"
    
    # Add progress towards goal if set
    if skill["goal_minutes"] > 0:
        progress = min(100, (skill["total_time_minutes"] / skill["goal_minutes"]) * 100)
        text += f"\nüéØ –ü—Ä–æ–≥—Ä–µ—Å—Å –∫ —Ü–µ–ª–∏: {progress:.1f}%"
    
    keyboard = get_skill_actions(skill_key)
    
    if is_message:
        await event.answer(text, reply_markup=keyboard, parse_mode="Markdown")
    else:
        await event.message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")
    
    # Show achievements if any
    if new_achievements:
        achievement_text = "üéâ **–ù–æ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è!**\n\n"
        for ach in new_achievements:
            achievement_text += f"üèÜ {ach['name']}\n{ach['description']}\n+{ach['points']} –æ—á–∫–æ–≤\n\n"
        
        if is_message:
            await event.answer(achievement_text, reply_markup=get_back_to_main(), parse_mode="Markdown")
        else:
            await event.message.answer(achievement_text, reply_markup=get_back_to_main(), parse_mode="Markdown")
    
    await state.clear()

@router.callback_query(F.data == "progress")
async def show_progress(callback: CallbackQuery):
    """Show overall progress"""
    user_id = str(callback.from_user.id)
    user = data_manager.get_user(user_id)
    skills = user["skills"]
    
    if not skills:
        text = (
            "üìä **–í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å**\n\n"
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –Ω–∞–≤—ã–∫–æ–≤ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è.\n"
            "–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—ã–π –Ω–∞–≤—ã–∫, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å!"
        )
        await callback.message.edit_text(text, reply_markup=get_main_menu(), parse_mode="Markdown")
        return
    
    # Calculate statistics
    total_sessions = sum(skill["sessions"] for skill in skills.values())
    total_minutes = sum(skill["total_time_minutes"] for skill in skills.values())
    total_hours = total_minutes // 60
    total_mins = total_minutes % 60
    
    active_streaks = [skill for skill in skills.values() if skill["streak"] > 0]
    max_streak = max([skill["streak"] for skill in skills.values()], default=0)
    best_streak = max([skill["best_streak"] for skill in skills.values()], default=0)
    
    text = (
        f"üìä **–í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å**\n\n"
        f"üéØ –ê–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–≤—ã–∫–æ–≤: {len(skills)}\n"
        f"üî• –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Ä–∏–π: {len(active_streaks)}\n"
        f"üìà –õ—É—á—à–∞—è —Å–µ—Ä–∏—è: {best_streak} –¥–Ω–µ–π\n"
        f"üìä –í—Å–µ–≥–æ —Å–µ—Å—Å–∏–π: {total_sessions}\n"
        f"‚è∞ –û–±—â–µ–µ –≤—Ä–µ–º—è: {total_hours}—á {total_mins}–º\n\n"
    )
    
    # Show top skills by time
    sorted_skills = sorted(skills.values(), key=lambda x: x["total_time_minutes"], reverse=True)
    text += "üèÜ **–¢–æ–ø –Ω–∞–≤—ã–∫–æ–≤ –ø–æ –≤—Ä–µ–º–µ–Ω–∏:**\n"
    
    for i, skill in enumerate(sorted_skills[:5], 1):
        hours = skill["total_time_minutes"] // 60
        mins = skill["total_time_minutes"] % 60
        time_text = f"{hours}—á {mins}–º" if hours > 0 else f"{mins}–º"
        streak_emoji = "üî•" if skill["streak"] > 0 else "üí§"
        text += f"{i}. {streak_emoji} {skill['name']} - {time_text}\n"
    
    await callback.message.edit_text(text, reply_markup=get_back_to_main(), parse_mode="Markdown")

@router.callback_query(F.data.startswith("skill_stats_"))
async def show_skill_stats(callback: CallbackQuery):
    """Show detailed skill statistics"""
    skill_key = callback.data.replace("skill_stats_", "")
    user_id = str(callback.from_user.id)
    
    skills = data_manager.get_user_skills(user_id)
    
    if skill_key not in skills:
        await callback.answer("‚ùå –ù–∞–≤—ã–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    skill = skills[skill_key]
    
    # Calculate statistics
    total_hours = skill["total_time_minutes"] // 60
    total_mins = skill["total_time_minutes"] % 60
    total_time_text = f"{total_hours}—á {total_mins}–º" if total_hours > 0 else f"{total_mins}–º"
    
    avg_session = skill["total_time_minutes"] / skill["sessions"] if skill["sessions"] > 0 else 0
    avg_hours = int(avg_session) // 60
    avg_mins = int(avg_session) % 60
    avg_text = f"{avg_hours}—á {avg_mins}–º" if avg_hours > 0 else f"{avg_mins}–º"
    
    # Days since start
    if skill.get("created_at"):
        start_date = datetime.fromisoformat(skill["created_at"])
        days_total = (datetime.now() - start_date).days + 1
        consistency = (skill["sessions"] / days_total * 100) if days_total > 0 else 0
    else:
        days_total = 0
        consistency = 0
    
    text = (
        f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–∞–≤—ã–∫–∞**\n\n"
        f"üéØ **{skill['name']}**\n"
        f"üìö –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {skill['category']}\n\n"
        f"‚è∞ –û–±—â–µ–µ –≤—Ä–µ–º—è: {total_time_text}\n"
        f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ—Å—Å–∏–π: {skill['sessions']}\n"
        f"üìà –°—Ä–µ–¥–Ω—è—è —Å–µ—Å—Å–∏—è: {avg_text}\n"
        f"üî• –¢–µ–∫—É—â–∞—è —Å–µ—Ä–∏—è: {skill['streak']} –¥–Ω–µ–π\n"
        f"üèÜ –õ—É—á—à–∞—è —Å–µ—Ä–∏—è: {skill['best_streak']} –¥–Ω–µ–π\n"
        f"üìÖ –î–Ω–µ–π –∏–∑—É—á–µ–Ω–∏—è: {days_total}\n"
        f"üìà –ü–æ—Å—Ç–æ—è–Ω—Å—Ç–≤–æ: {consistency:.1f}%\n"
    )
    
    if skill["goal_minutes"] > 0:
        goal_hours = skill["goal_minutes"] // 60
        goal_mins = skill["goal_minutes"] % 60
        goal_text = f"{goal_hours}—á {goal_mins}–º" if goal_hours > 0 else f"{goal_mins}–º"
        progress = min(100, (skill["total_time_minutes"] / skill["goal_minutes"]) * 100)
        text += f"\nüéØ –¶–µ–ª—å: {goal_text}\nüìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {progress:.1f}%\n"
        
        if progress >= 100:
            text += "üéâ –¶–µ–ª—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞! –ü–æ—Å—Ç–∞–≤—å—Ç–µ –Ω–æ–≤—É—é —Ü–µ–ª—å!"
    
    # Show recent notes if any
    if skill.get("notes"):
        recent_notes = sorted(skill["notes"], key=lambda x: x["date"], reverse=True)[:3]
        text += "\nüìù **–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏:**\n"
        for note in recent_notes:
            note_date = datetime.fromisoformat(note["date"])
            text += f"‚Ä¢ {note_date.strftime('%d.%m')} - {note['note']}\n"
    
    await callback.message.edit_text(
        text,
        reply_markup=get_skill_actions(skill_key),
        parse_mode="Markdown"
    )

@router.callback_query(F.data.startswith("set_goal_"))
async def set_goal_start(callback: CallbackQuery, state: FSMContext):
    """Start setting goal for skill"""
    skill_key = callback.data.replace("set_goal_", "")
    user_id = str(callback.from_user.id)
    
    skills = data_manager.get_user_skills(user_id)
    
    if skill_key not in skills:
        await callback.answer("‚ùå –ù–∞–≤—ã–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    skill = skills[skill_key]
    await state.update_data(goal_skill=skill_key)
    await state.set_state(ProgressStates.setting_goal)
    
    current_goal = ""
    if skill["goal_minutes"] > 0:
        goal_hours = skill["goal_minutes"] // 60
        goal_mins = skill["goal_minutes"] % 60
        current_goal = f"\n\nüìä –¢–µ–∫—É—â–∞—è —Ü–µ–ª—å: {goal_hours}—á {goal_mins}–º"
    
    text = (
        f"üéØ **–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ü–µ–ª—å**\n\n"
        f"–ù–∞–≤—ã–∫: {skill['name']}{current_goal}\n\n"
        f"–ù–∞–ø–∏—à–∏—Ç–µ —Ü–µ–ª—å –≤ —á–∞—Å–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä: 10) –∏–ª–∏ –≤ –º–∏–Ω—É—Ç–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä: 600–º):"
    )
    
    await callback.message.edit_text(text, reply_markup=get_back_to_main(), parse_mode="Markdown")

@router.message(ProgressStates.setting_goal)
async def process_goal(message: Message, state: FSMContext):
    """Process goal setting"""
    goal_text = message.text.strip().lower()
    
    try:
        if goal_text.endswith('–º'):
            # Minutes
            minutes = int(goal_text[:-1])
        elif goal_text.endswith('—á'):
            # Hours
            hours = int(goal_text[:-1])
            minutes = hours * 60
        else:
            # Assume hours
            hours = int(goal_text)
            minutes = hours * 60
        
        if minutes < 1 or minutes > 10000:
            await message.answer("‚ö†Ô∏è –¶–µ–ª—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 1 –º–∏–Ω—É—Ç—ã –¥–æ 10000 –º–∏–Ω—É—Ç (167 —á–∞—Å–æ–≤). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            return
        
        data = await state.get_data()
        skill_key = data.get("goal_skill")
        
        if not skill_key:
            await message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–∞–≤—ã–∫ –Ω–µ –≤—ã–±—Ä–∞–Ω", reply_markup=get_main_menu())
            await state.clear()
            return
        
        # Update goal
        user_id = str(message.from_user.id)
        user = data_manager.get_user(user_id)
        
        if skill_key in user["skills"]:
            user["skills"][skill_key]["goal_minutes"] = minutes
            data_manager.update_user(user_id, user)
            
            hours = minutes // 60
            mins = minutes % 60
            goal_text = f"{hours}—á {mins}–º" if hours > 0 else f"{mins}–º"
            
            skill_name = user["skills"][skill_key]["name"]
            current_time = user["skills"][skill_key]["total_time_minutes"]
            progress = min(100, (current_time / minutes) * 100) if minutes > 0 else 0
            
            text = (
                f"‚úÖ **–¶–µ–ª—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!**\n\n"
                f"üéØ –ù–∞–≤—ã–∫: {skill_name}\n"
                f"üéØ –¶–µ–ª—å: {goal_text}\n"
                f"üìä –¢–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å: {progress:.1f}%\n\n"
                f"–£–¥–∞—á–∏ –≤ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ —Ü–µ–ª–∏!"
            )
            
            await message.answer(text, reply_markup=get_skill_actions(skill_key), parse_mode="Markdown")
        else:
            await message.answer("‚ùå –ù–∞–≤—ã–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω", reply_markup=get_main_menu())
        
        await state.clear()
        
    except ValueError:
        await message.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–∏—Å–ª–æ —á–∞—Å–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 10) –∏–ª–∏ –º–∏–Ω—É—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä: 600–º):")

@router.callback_query(F.data == "get_tip")
async def get_general_tip(callback: CallbackQuery):
    """Get general learning tip"""
    user_id = str(callback.from_user.id)
    
    # Update statistics
    data_manager.update_statistics(user_id, "tips_received")
    
    # Get random tip
    tips = LEARNING_TIPS["default"]
    tip = random.choice(tips)
    
    # Check for achievements
    new_achievements = achievement_manager.check_achievements(user_id)
    
    text = f"üí° **–°–æ–≤–µ—Ç –¥–ª—è –æ–±—É—á–µ–Ω–∏—è**\n\n{tip}"
    
    await callback.message.edit_text(text, reply_markup=get_back_to_main(), parse_mode="Markdown")
    
    # Show achievements if any
    if new_achievements:
        achievement_text = "üéâ **–ù–æ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è!**\n\n"
        for ach in new_achievements:
            achievement_text += f"üèÜ {ach['name']}\n{ach['description']}\n+{ach['points']} –æ—á–∫–æ–≤\n\n"
        
        await callback.message.answer(achievement_text, reply_markup=get_back_to_main(), parse_mode="Markdown")

@router.callback_query(F.data == "get_motivation")
async def get_motivation(callback: CallbackQuery):
    """Get motivational message"""
    user_id = str(callback.from_user.id)
    
    # Update statistics
    data_manager.update_statistics(user_id, "motivations_received")
    
    # Get random motivation
    motivation = random.choice(MOTIVATIONAL_MESSAGES)
    
    text = f"üí™ **–ú–æ—Ç–∏–≤–∞—Ü–∏—è**\n\n{motivation}"
    
    await callback.message.edit_text(text, reply_markup=get_back_to_main(), parse_mode="Markdown")

@router.callback_query(F.data == "statistics")
async def show_statistics(callback: CallbackQuery):
    """Show detailed user statistics"""
    user_id = str(callback.from_user.id)
    user = data_manager.get_user(user_id)
    
    # Calculate detailed statistics
    skills = user["skills"]
    stats = user["statistics"]
    
    total_skills = len(skills)
    active_skills = len([s for s in skills.values() if s["streak"] > 0])
    total_sessions = stats["total_sessions"]
    total_minutes = stats["total_time_minutes"]
    total_hours = total_minutes // 60
    total_mins = total_minutes % 60
    
    # Calculate averages
    avg_session = total_minutes / total_sessions if total_sessions > 0 else 0
    avg_hours = int(avg_session) // 60
    avg_mins = int(avg_session) % 60
    
    # Days since registration
    created_date = datetime.fromisoformat(user["created_at"])
    days_registered = (datetime.now() - created_date).days + 1
    
    # Session frequency
    sessions_per_day = total_sessions / days_registered if days_registered > 0 else 0
    
    text = (
        f"üìà **–ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞**\n\n"
        f"üë§ **–û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:**\n"
        f"üìÖ –í –±–æ—Ç–µ: {days_registered} –¥–Ω–µ–π\n"
        f"üéØ –í—Å–µ–≥–æ –Ω–∞–≤—ã–∫–æ–≤: {total_skills}\n"
        f"üî• –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Ä–∏–π: {active_skills}\n"
        f"üèÜ –û—á–∫–æ–≤: {user['total_points']}\n\n"
        f"üìä **–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:**\n"
        f"üìà –í—Å–µ–≥–æ —Å–µ—Å—Å–∏–π: {total_sessions}\n"
        f"‚è∞ –û–±—â–µ–µ –≤—Ä–µ–º—è: {total_hours}—á {total_mins}–º\n"
        f"üìä –°—Ä–µ–¥–Ω—è—è —Å–µ—Å—Å–∏—è: {avg_hours}—á {avg_mins}–º\n"
        f"üìÖ –°–µ—Å—Å–∏–π –≤ –¥–µ–Ω—å: {sessions_per_day:.1f}\n\n"
        f"üí° **–í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ:**\n"
        f"üí° –°–æ–≤–µ—Ç–æ–≤ –ø–æ–ª—É—á–µ–Ω–æ: {stats['tips_received']}\n"
        f"üí™ –ú–æ—Ç–∏–≤–∞—Ü–∏–π –ø–æ–ª—É—á–µ–Ω–æ: {stats['motivations_received']}\n"
    )
    
    # Show skill breakdown if any
    if skills:
        text += "\nüéØ **–ù–∞–≤—ã–∫–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏:**\n"
        sorted_skills = sorted(skills.values(), key=lambda x: x["total_time_minutes"], reverse=True)
        
        for skill in sorted_skills[:5]:
            hours = skill["total_time_minutes"] // 60
            mins = skill["total_time_minutes"] % 60
            time_text = f"{hours}—á {mins}–º" if hours > 0 else f"{mins}–º"
            streak_emoji = "üî•" if skill["streak"] > 0 else "üí§"
            percentage = (skill["total_time_minutes"] / total_minutes * 100) if total_minutes > 0 else 0
            text += f"‚Ä¢ {streak_emoji} {skill['name']}: {time_text} ({percentage:.1f}%)\n"
    
    await callback.message.edit_text(text, reply_markup=get_back_to_main(), parse_mode="Markdown")
